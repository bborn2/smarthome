package com.baidu.smarthome.phone.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.baidu.smarthome.phone.dao.Member;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table MEMBER.
*/
public class MemberDao extends AbstractDao<Member, Long> {

    public static final String TABLENAME = "MEMBER";

    /**
     * Properties of entity Member.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Athome = new Property(2, Boolean.class, "athome", false, "ATHOME");
        public final static Property Longitude = new Property(3, Double.class, "longitude", false, "LONGITUDE");
        public final static Property Lattitude = new Property(4, Double.class, "lattitude", false, "LATTITUDE");
        public final static Property Position = new Property(5, String.class, "position", false, "POSITION");
        public final static Property Avatarid = new Property(6, Integer.class, "avatarid", false, "AVATARID");
    };

    private DaoSession daoSession;


    public MemberDao(DaoConfig config) {
        super(config);
    }
    
    public MemberDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'MEMBER' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'NAME' TEXT NOT NULL ," + // 1: name
                "'ATHOME' INTEGER," + // 2: athome
                "'LONGITUDE' REAL," + // 3: longitude
                "'LATTITUDE' REAL," + // 4: lattitude
                "'POSITION' TEXT," + // 5: position
                "'AVATARID' INTEGER);"); // 6: avatarid
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'MEMBER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Member entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
 
        Boolean athome = entity.getAthome();
        if (athome != null) {
            stmt.bindLong(3, athome ? 1l: 0l);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(4, longitude);
        }
 
        Double lattitude = entity.getLattitude();
        if (lattitude != null) {
            stmt.bindDouble(5, lattitude);
        }
 
        String position = entity.getPosition();
        if (position != null) {
            stmt.bindString(6, position);
        }
 
        Integer avatarid = entity.getAvatarid();
        if (avatarid != null) {
            stmt.bindLong(7, avatarid);
        }
    }

    @Override
    protected void attachEntity(Member entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Member readEntity(Cursor cursor, int offset) {
        Member entity = new Member( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // athome
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // longitude
            cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4), // lattitude
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // position
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // avatarid
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Member entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setAthome(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setLongitude(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setLattitude(cursor.isNull(offset + 4) ? null : cursor.getDouble(offset + 4));
        entity.setPosition(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setAvatarid(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Member entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Member entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
