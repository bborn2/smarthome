package com.baidu.smarthome.phone.dao;

import java.util.List;
import com.baidu.smarthome.phone.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table MEMBER.
 */
public class Member {

    private Long id;
    /** Not-null value. */
    private String name;
    private Boolean athome;
    private Double longitude;
    private Double lattitude;
    private String position;
    private Integer avatarid;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient MemberDao myDao;

    private List<Message> messagelist;

    public Member() {
    }

    public Member(Long id) {
        this.id = id;
    }

    public Member(Long id, String name, Boolean athome, Double longitude, Double lattitude, String position, Integer avatarid) {
        this.id = id;
        this.name = name;
        this.athome = athome;
        this.longitude = longitude;
        this.lattitude = lattitude;
        this.position = position;
        this.avatarid = avatarid;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getMemberDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(String name) {
        this.name = name;
    }

    public Boolean getAthome() {
        return athome;
    }

    public void setAthome(Boolean athome) {
        this.athome = athome;
    }

    public Double getLongitude() {
        return longitude;
    }

    public void setLongitude(Double longitude) {
        this.longitude = longitude;
    }

    public Double getLattitude() {
        return lattitude;
    }

    public void setLattitude(Double lattitude) {
        this.lattitude = lattitude;
    }

    public String getPosition() {
        return position;
    }

    public void setPosition(String position) {
        this.position = position;
    }

    public Integer getAvatarid() {
        return avatarid;
    }

    public void setAvatarid(Integer avatarid) {
        this.avatarid = avatarid;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Message> getMessagelist() {
        if (messagelist == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            MessageDao targetDao = daoSession.getMessageDao();
            List<Message> messagelistNew = targetDao._queryMember_Messagelist(id);
            synchronized (this) {
                if(messagelist == null) {
                    messagelist = messagelistNew;
                }
            }
        }
        return messagelist;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetMessagelist() {
        messagelist = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
